Важно!: чтобы вы не занимались всей установкой (особенно серверных зависимостей) сделал тестовую версию тут:

http://95.46.44.111:82/	- 	реакт фронт
http://95.46.44.111:81/	-	ларавел фронт

Задачу разбил на 2 два проекта. Вот примерное описание, может быть, излишне подробное:

1. backend-laravel - для бекенда

Серверные зависимости:
LibreOffice				-	с помощью него конвертируются файлы форматов ms office, я проверял на word,excel,powerpoint
pdftk					-	защищает PDF файлы от чтения\печати
ImageMagick(convert)	-	по хардкору растеризирует пдф файлы, чтобы защиты не показалось мало

Установка:
composer install
php artisan migrate:refresh --seed

Запуск:
php artisan serve

Описание:

В начале я разбирался отдельно с laravel, поэтому сделал работающию версию без реакта, а потом уже переосмыслил и сделал апи для него.
Поэтому можн оконвертировать файлики не запуская реакт.

Поэтому на контроллеры: HomeController и UFiles контроллер можно не обращать внимания.

Основной файлик для ректа это ApiComponent.php
Через него и просходит загрузка, выдача, и обработка команд.

Конвертация через класс PDFConverter
По сути он запускает shell команды на конвертацию, не самое производительное решение, но мне показалось, что для тестовых целей пойдет.

Использована БД Sqlite для хранения списка файлов, оригинального имени, и физических адресов.

В laravel фронте я сдлеал привязку к пользователям, но для ректа не стал тратить время на авторизацию по токенам, поэтому фалы хранятся просто под пользователем API, без авторизации.

storage/app/api-files/		-	для файлов из реакт-фронта
storage/app/user-files/		-	для файлов из ларавел-фронта

Для API авторизация не нужна.

Учетка для laravel фронта:
	test@test.com
	q1w2e3

2. front-react - для фронта 

Установка:
npm install

Запуск:
npm start

Описание:

Все что нужно, задать хост для API бекенда тут:
<PDFConverter host="http://127.0.0.1:8000/api" />

Сам компонент в файле PDFConverter.js. 
Все его дочерние компоненты тоже там, их не очень много, поэтому оставил в одном файле для наглядности.
Бутстрап подключил просто чтобы облагородить интерфейс, в демонстрационных целях.
Для запросов к апи использовал axios

Структура такая:

	PDFConverter						//сам компонет конвертора
		ConverterFileList				//Список файлов и операции с ними
			ConverterFileListRow		//Строка с файлом
				ButtonLink				//кнопки-ссылки для скачивания файлов
				ButtonClick				//кнопки-действия
		ConverterUploadForm				//Форма загрузки новых файлов, самый большой под-компонент, может быть стоило бы его разбить
		
